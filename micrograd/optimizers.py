from typing import List
from micrograd.engine import Value
import math

class SGD:
    '''
    Stochastic Gradient Descent - initial simple version without momentum, etc.
    '''

    def __init__(self, lr=0.001):
        self.lr = lr

    def step(self, params: List[Value]):
        for p in params:
            p.data -= self.lr * p.grad
class Adam:
    '''
    Adam optimizer - WARNING: this is mostly generated by copilot (not fully tested)!
    '''

    def __init__(self, lr=0.001, beta1=0.9, beta2=0.999, eps=1e-8):
        self.lr = lr
        self.beta1 = beta1
        self.beta2 = beta2
        self.eps = eps
        self.m = {}
        self.v = {}
        self.t = 0
        self.num_params=0

    def step(self, params: List[Value]):
        self.t += 1
        for p in params:
            if p not in self.m:
                self.m[p.id] = 0
                self.v[p.id] = 0
            self.m[p.id] = self.beta1 * self.m[p.id] + (1 - self.beta1) * p.grad
            self.v[p.id] = self.beta2 * self.v[p.id] + (1 - self.beta2) * p.grad**2
            m_hat = self.m[p.id] / (1 - self.beta1**self.t)
            v_hat = self.v[p.id] / (1 - self.beta2**self.t)   
            p.data -= self.lr * m_hat / (math.sqrt(v_hat) + self.eps)
        